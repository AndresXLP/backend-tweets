// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/andresxlp/backend-twitter/internal/domain/dto"
	entity "github.com/andresxlp/backend-twitter/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	models "github.com/andresxlp/backend-twitter/internal/infra/adapters/postgres/models"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateTweet provides a mock function with given fields: ctx, tweetData
func (_m *Repository) CreateTweet(ctx context.Context, tweetData models.Tweet) error {
	ret := _m.Called(ctx, tweetData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Tweet) error); ok {
		r0 = rf(ctx, tweetData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, newUser
func (_m *Repository) CreateUser(ctx context.Context, newUser models.User) error {
	ret := _m.Called(ctx, newUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(ctx, newUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTweet provides a mock function with given fields: ctx, tweet
func (_m *Repository) DeleteTweet(ctx context.Context, tweet models.Tweet) error {
	ret := _m.Called(ctx, tweet)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Tweet) error); ok {
		r0 = rf(ctx, tweet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTweetByID provides a mock function with given fields: ctx, idTweet
func (_m *Repository) GetTweetByID(ctx context.Context, idTweet int) (entity.Tweets, error) {
	ret := _m.Called(ctx, idTweet)

	var r0 entity.Tweets
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (entity.Tweets, error)); ok {
		return rf(ctx, idTweet)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.Tweets); ok {
		r0 = rf(ctx, idTweet)
	} else {
		r0 = ret.Get(0).(entity.Tweets)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, idTweet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTweetByIDAndUserID provides a mock function with given fields: ctx, idTweet, userID
func (_m *Repository) GetTweetByIDAndUserID(ctx context.Context, idTweet int, userID int) (entity.Tweets, error) {
	ret := _m.Called(ctx, idTweet, userID)

	var r0 entity.Tweets
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (entity.Tweets, error)); ok {
		return rf(ctx, idTweet, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) entity.Tweets); ok {
		r0 = rf(ctx, idTweet, userID)
	} else {
		r0 = ret.Get(0).(entity.Tweets)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, idTweet, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTweets provides a mock function with given fields: ctx, request
func (_m *Repository) GetTweets(ctx context.Context, request dto.TweetsRequest) (dto.Pagination, entity.TweetsWithOwners, error) {
	ret := _m.Called(ctx, request)

	var r0 dto.Pagination
	var r1 entity.TweetsWithOwners
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.TweetsRequest) (dto.Pagination, entity.TweetsWithOwners, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.TweetsRequest) dto.Pagination); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(dto.Pagination)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.TweetsRequest) entity.TweetsWithOwners); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(entity.TweetsWithOwners)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, dto.TweetsRequest) error); ok {
		r2 = rf(ctx, request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUser provides a mock function with given fields: ctx, email
func (_m *Repository) GetUser(ctx context.Context, email string) (entity.User, error) {
	ret := _m.Called(ctx, email)

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTweet provides a mock function with given fields: ctx, tweet
func (_m *Repository) UpdateTweet(ctx context.Context, tweet models.Tweet) error {
	ret := _m.Called(ctx, tweet)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Tweet) error); ok {
		r0 = rf(ctx, tweet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
