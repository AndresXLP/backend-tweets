// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/andresxlp/backend-twitter/internal/domain/dto"
	mock "github.com/stretchr/testify/mock"
)

// Session is an autogenerated mock type for the Session type
type Session struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, loginData
func (_m *Session) Login(ctx context.Context, loginData dto.Login) (string, error) {
	ret := _m.Called(ctx, loginData)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Login) (string, error)); ok {
		return rf(ctx, loginData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.Login) string); ok {
		r0 = rf(ctx, loginData)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.Login) error); ok {
		r1 = rf(ctx, loginData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSession interface {
	mock.TestingT
	Cleanup(func())
}

// NewSession creates a new instance of Session. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSession(t mockConstructorTestingTNewSession) *Session {
	mock := &Session{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
