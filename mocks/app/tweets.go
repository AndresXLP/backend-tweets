// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/andresxlp/backend-twitter/internal/domain/dto"
	mock "github.com/stretchr/testify/mock"
)

// Tweets is an autogenerated mock type for the Tweets type
type Tweets struct {
	mock.Mock
}

// CreateTweet provides a mock function with given fields: ctx, tweetData
func (_m *Tweets) CreateTweet(ctx context.Context, tweetData dto.Tweets) error {
	ret := _m.Called(ctx, tweetData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Tweets) error); ok {
		r0 = rf(ctx, tweetData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTweet provides a mock function with given fields: ctx, tweetID
func (_m *Tweets) DeleteTweet(ctx context.Context, tweetID int) error {
	ret := _m.Called(ctx, tweetID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, tweetID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTweetByID provides a mock function with given fields: ctx, idTweet
func (_m *Tweets) GetTweetByID(ctx context.Context, idTweet int) (dto.Tweets, error) {
	ret := _m.Called(ctx, idTweet)

	var r0 dto.Tweets
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (dto.Tweets, error)); ok {
		return rf(ctx, idTweet)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) dto.Tweets); ok {
		r0 = rf(ctx, idTweet)
	} else {
		r0 = ret.Get(0).(dto.Tweets)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, idTweet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTweetByIDAndUserID provides a mock function with given fields: ctx, idTweet, userID
func (_m *Tweets) GetTweetByIDAndUserID(ctx context.Context, idTweet int, userID int) (dto.Tweets, error) {
	ret := _m.Called(ctx, idTweet, userID)

	var r0 dto.Tweets
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (dto.Tweets, error)); ok {
		return rf(ctx, idTweet, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) dto.Tweets); ok {
		r0 = rf(ctx, idTweet, userID)
	} else {
		r0 = ret.Get(0).(dto.Tweets)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, idTweet, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTweets provides a mock function with given fields: ctx, request
func (_m *Tweets) GetTweets(ctx context.Context, request dto.TweetsRequest) (dto.Pagination, error) {
	ret := _m.Called(ctx, request)

	var r0 dto.Pagination
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.TweetsRequest) (dto.Pagination, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.TweetsRequest) dto.Pagination); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(dto.Pagination)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.TweetsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTweet provides a mock function with given fields: ctx, updateData
func (_m *Tweets) UpdateTweet(ctx context.Context, updateData dto.Tweets) error {
	ret := _m.Called(ctx, updateData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Tweets) error); ok {
		r0 = rf(ctx, updateData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTweets interface {
	mock.TestingT
	Cleanup(func())
}

// NewTweets creates a new instance of Tweets. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTweets(t mockConstructorTestingTNewTweets) *Tweets {
	mock := &Tweets{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
